<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Docker on Halog</title>
    <link>https://haservi.github.io/categories/docker/</link>
    <description>Recent content in Docker on Halog</description>
    <image>
      <title>Halog</title>
      <url>https://haservi.github.io/cover.jpeg</url>
      <link>https://haservi.github.io/cover.jpeg</link>
    </image>
    <generator>Hugo -- 0.125.7</generator>
    <language>ko</language>
    <lastBuildDate>Wed, 23 Oct 2024 08:47:48 +0900</lastBuildDate>
    <atom:link href="https://haservi.github.io/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>vue를 이용하여 도커와 멀티스테이지빌드 도커 차이 확인하기</title>
      <link>https://haservi.github.io/posts/devops/docker/docker-multi-stage-build/</link>
      <pubDate>Wed, 23 Oct 2024 08:47:48 +0900</pubDate>
      <guid>https://haservi.github.io/posts/devops/docker/docker-multi-stage-build/</guid>
      <description>도커는 애플리케이션을 컨테이너화하여 개발, 배포 과정을 단순화하는 강력한 도구입니다.
멀티 스테이지 빌드는 도커 이미지의 크기를 줄이고, 빌드 속도를 개선하는 데 유용한 기능입니다.
도커파일만 이용할 경우에는 구조가 단순하며, 빠른 설정이 가능합니다. 하지만, 멀티스테이지 도커에 비해 이미지 크기가 크며, 중간 빌드 결과물(ex: 컴파일 도구, 라이브러리 등)이 모두 포함되므로 리소스 낭비가 발생할 수 있습니다.
멀티스테이지 도커를 이용할 경우 아래와 같은 장점이 있습니다.
이미지의 크기를 줄일 수 있음 개발 단계에서 사용된 도구나 라이브러리를 최종 이미지에서 제외함으로써 이미지의 크기를 최소화 보안을 강화 불필요한 소프트웨어가 최종 이미지에 포함되지 않기 때문에 공격 범위를 줄일 수 있음 빌드 속도를 향상시킬 수 있음 멀티 스테이지 빌드를 사용하면 필요한 단계만 실행하여 빌드 시간을 단축 위와 같은 장점이 있긴 하지만, 멀티스테이지 도커를 위한 커맨드를 작성하기 위해서 Dockerfile이 단계가 복잡할 수 있으며, 빌드에 필요한 단계별 설정이 필요하기 때문에 초기 설정 시간이 더 걸릴 수 있습니다.</description>
    </item>
    <item>
      <title>Synology NAS Docker MariaDB 설치하기</title>
      <link>https://haservi.github.io/posts/devops/docker/nas-mariadb-setting/</link>
      <pubDate>Mon, 01 Jan 2024 22:22:18 +0900</pubDate>
      <guid>https://haservi.github.io/posts/devops/docker/nas-mariadb-setting/</guid>
      <description>개인용 NAS를 충분히 이용하지 못한다는 생각이 문득 들었습니다.
기본적으로 제공하는 Photos, 파일 저장소 정도만 이용하며, Docker Gitlab 서버 배포 중이긴 하지만.. 그냥 배포중 입니다.
이 정도도 충분하긴 하지만 조금 더 활용하면 좋지 않을까라는 생각을 하게 됐습니다.
문득 생각해 보니 NAS에서 Docker를 사용할 수 있다는 것은 개인적으로 운용할 수 있는 장난감 서버로 최적이지 않을까라는 생각이 들었습니다.
물론 아마도 많은 트래픽은 감당하지 못하더라도 개인적인 용도로 테스트 서버 정도는 만들 수 있지 않을까 생각됩니다.</description>
    </item>
    <item>
      <title>Synology NAS로 Docker GitLab 설치하기</title>
      <link>https://haservi.github.io/posts/devops/docker/nas-docker-gitlab-setting/</link>
      <pubDate>Tue, 02 Aug 2022 23:22:38 +0900</pubDate>
      <guid>https://haservi.github.io/posts/devops/docker/nas-docker-gitlab-setting/</guid>
      <description>시작하며 DSM 7버전에서는 SVN과 GitLab을 패키지로 지원하지 않습니다.
그렇기 때문에 Docker를 이용하여 설치해야 합니다.
제 경우는 KT 공유기와 Synology NAS(220+)에 램 8기가를 추가한 상태입니다.
공유기 포트포워딩만 조금 다를 뿐 전체적인 방법은 동일할 것이라 생각됩니다.
GitLab을 쾌적하게 쓰시려면 최소 램 4기가 이상으로 설정하시는게 좋습니다. 해당 설정은 컨테이너 생성 후에도 편집이 가능하니 필요에 따라 조정하시면 됩니다.
알림
완성 후 GitLab Repository 주소 경로가 올바르지 않은 이슈가 있지만 아래와 같이 설정하면 사용하는데 이상은 없을 것이라 생각됩니다.</description>
    </item>
    <item>
      <title>Docker 메모리 제한 설정 및 강제 종료</title>
      <link>https://haservi.github.io/posts/devops/docker/docker-smemory-controll-and-exit/</link>
      <pubDate>Sun, 12 Jun 2022 18:22:10 +0900</pubDate>
      <guid>https://haservi.github.io/posts/devops/docker/docker-smemory-controll-and-exit/</guid>
      <description>Docker 메모리 프로세서 제어 Docker를 사용하다 보면 아래처럼 치솟는 메모리 사용량을 볼 때가 있습니다.
아래의 방법은 Docker를 테스트 중 메모리 사용량을 Windows에서 제어 하는 방법입니다.
탐색기의 사용자 위치(C:\Users\&amp;lt;사용자&amp;gt;)에 .wslconfig 파일을 생성합니다.
아래와 같이 해당 파일의 설정을 지정합니다.
1 2 3 4 5 6 7 8 9 10 11 12 # 설정은 WSL 2에서 실행되는 모든 Linux 배포판에 적용 [wsl2] # VM 메모리를 4GB 이하로 제한. # GB 또는 MB를 사용하여 정수로 설정할 수 있음 memory=4GB # 2개의 가상 프로세서를 사용하도록 VM을 설정 processors=2 # 스왑 저장 공간의 양을 8GB로 설정합니다.</description>
    </item>
  </channel>
</rss>
