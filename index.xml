<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Halog</title>
    <link>https://haservi.github.io/</link>
    <description>Recent content on Halog</description>
    <image>
      <title>Halog</title>
      <url>https://haservi.github.io/cover.jpeg</url>
      <link>https://haservi.github.io/cover.jpeg</link>
    </image>
    <generator>Hugo -- 0.125.7</generator>
    <language>ko</language>
    <lastBuildDate>Tue, 15 Jul 2025 22:42:45 +0900</lastBuildDate>
    <atom:link href="https://haservi.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[혼공머신] 3주차 학습 내용 정리</title>
      <link>https://haservi.github.io/posts/books/hg-mldl/week-3/</link>
      <pubDate>Tue, 15 Jul 2025 22:42:45 +0900</pubDate>
      <guid>https://haservi.github.io/posts/books/hg-mldl/week-3/</guid>
      <description>혼자 공부하는 머신러닝+딥러닝 3주차 학습 내용</description>
    </item>
    <item>
      <title>[혼공머신] 2주차 학습 내용 정리</title>
      <link>https://haservi.github.io/posts/books/hg-mldl/week-2/</link>
      <pubDate>Sun, 13 Jul 2025 13:49:35 +0900</pubDate>
      <guid>https://haservi.github.io/posts/books/hg-mldl/week-2/</guid>
      <description>혼자 공부하는 머신러닝+딥러닝 2주차 학습 내용</description>
    </item>
    <item>
      <title>[혼공머신] 1주차 학습 내용 정리</title>
      <link>https://haservi.github.io/posts/books/hg-mldl/week-1/</link>
      <pubDate>Sat, 05 Jul 2025 23:38:28 +0900</pubDate>
      <guid>https://haservi.github.io/posts/books/hg-mldl/week-1/</guid>
      <description>혼자 공부하는 머신러닝+딥러닝 1주차 학습 내용</description>
    </item>
    <item>
      <title>Mac에서 이미지 파일 이름 일괄 변경하는 방법</title>
      <link>https://haservi.github.io/posts/tips/mac-imagefile-renames/</link>
      <pubDate>Wed, 18 Jun 2025 10:01:43 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/mac-imagefile-renames/</guid>
      <description>Mac에서 이미지 파일 이름을 일괄적으로 변경하는 두 가지 방법</description>
    </item>
    <item>
      <title>Mac에서 5000번 포트 사용 해제하기</title>
      <link>https://haservi.github.io/posts/tips/mac-5000-port-disable/</link>
      <pubDate>Tue, 27 May 2025 19:55:13 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/mac-5000-port-disable/</guid>
      <description>Mac에서 5000번 포트 충돌 문제 해결 방법</description>
    </item>
    <item>
      <title>Mac에서 터미널로 잠자기 모드 해제하는 방법</title>
      <link>https://haservi.github.io/posts/tips/mac-wake-sleepmode/</link>
      <pubDate>Thu, 17 Apr 2025 19:15:39 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/mac-wake-sleepmode/</guid>
      <description>Mac에서 터미널 명령어를 사용하여 잠자기 모드를 해제하는 방법</description>
    </item>
    <item>
      <title>맥북 외부 키보드 Ctrl와 Command 키 바꿔 사용하기</title>
      <link>https://haservi.github.io/posts/tools/how-to-mac-key-setting/</link>
      <pubDate>Fri, 07 Feb 2025 21:30:47 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tools/how-to-mac-key-setting/</guid>
      <description>맥북과 윈도우를 함께 사용하다 보면 Ctrl과 Command 키 배열이 달라 불편할 때가 많습니다.
많은 블로그에서는 Karabiner를 활용해 키 설정을 변경하는 방법을 소개하지만, 외부 키보드마다 설정을 변경하는 것보다는 맥북 내부 키보드 자체를 조정하는 것이 더 효율적입니다.
이렇게 설정해 두면 키보드를 자주 바꿔 사용할 때마다 별도로 변경할 필요 없이 편리하게 사용할 수 있습니다.
우선 Karabiner-Elements를 다운로드 합니다.
우선 맥북 기본 키보드는 위와 같이 설정합니다.
그리고 모든 키보드 설정은 위와 같이 설정하면 됩니다.</description>
    </item>
    <item>
      <title>비쥬얼 스튜디오에서 C#, XAML 코드 자동정렬 방법</title>
      <link>https://haservi.github.io/posts/wpf/codiing-convention/</link>
      <pubDate>Mon, 20 Jan 2025 19:19:55 +0900</pubDate>
      <guid>https://haservi.github.io/posts/wpf/codiing-convention/</guid>
      <description>C# WPF 프로젝트를 진행하면서 간단하게 코드 컨벤션과 코드 정렬을 하는 방법에 대해 알아보겠습니다.
협업을 하는 경우 코드스타일이 이왕이면 일관된 것을 선호하는 편입니다.
코드 컨벤션 공식 문서 에서 전반적으로 코딩 규칙에 대해 작성돼 있습니다.
코드 컨벤션은 위의 문서를 읽어보면 도움이 될 것이라 생각됩니다.
이번에 작성할 내용은 간단하게 포맷을 정렬하여 팀에서 코드 정렬과 관련한 스타일을 통일시키는 방법에 대해 알아보겠습니다.
Code Formatting 코드 정렬은 2개의 설정만 바꿔주면 됩니다. 생각보다 간단하기에 이렇게 쓰면 좋습니다.</description>
    </item>
    <item>
      <title>vue를 이용하여 도커와 멀티스테이지빌드 도커 차이 확인하기</title>
      <link>https://haservi.github.io/posts/devops/docker/docker-multi-stage-build/</link>
      <pubDate>Wed, 23 Oct 2024 08:47:48 +0900</pubDate>
      <guid>https://haservi.github.io/posts/devops/docker/docker-multi-stage-build/</guid>
      <description>도커는 애플리케이션을 컨테이너화하여 개발, 배포 과정을 단순화하는 강력한 도구입니다.
멀티 스테이지 빌드는 도커 이미지의 크기를 줄이고, 빌드 속도를 개선하는 데 유용한 기능입니다.
도커파일만 이용할 경우에는 구조가 단순하며, 빠른 설정이 가능합니다. 하지만, 멀티스테이지 도커에 비해 이미지 크기가 크며, 중간 빌드 결과물(ex: 컴파일 도구, 라이브러리 등)이 모두 포함되므로 리소스 낭비가 발생할 수 있습니다.
멀티스테이지 도커를 이용할 경우 아래와 같은 장점이 있습니다.
이미지의 크기를 줄일 수 있음 개발 단계에서 사용된 도구나 라이브러리를 최종 이미지에서 제외함으로써 이미지의 크기를 최소화 보안을 강화 불필요한 소프트웨어가 최종 이미지에 포함되지 않기 때문에 공격 범위를 줄일 수 있음 빌드 속도를 향상시킬 수 있음 멀티 스테이지 빌드를 사용하면 필요한 단계만 실행하여 빌드 시간을 단축 위와 같은 장점이 있긴 하지만, 멀티스테이지 도커를 위한 커맨드를 작성하기 위해서 Dockerfile이 단계가 복잡할 수 있으며, 빌드에 필요한 단계별 설정이 필요하기 때문에 초기 설정 시간이 더 걸릴 수 있습니다.</description>
    </item>
    <item>
      <title>[Udemy] Flutter &amp; Dart 강의 리뷰</title>
      <link>https://haservi.github.io/posts/review/udemy-flutter/</link>
      <pubDate>Wed, 09 Oct 2024 20:20:33 +0900</pubDate>
      <guid>https://haservi.github.io/posts/review/udemy-flutter/</guid>
      <description>Flutter 강의를 듣고 개인적으로 필요한 내용을 정리했습니다.</description>
    </item>
    <item>
      <title>안드로이드 Wi-Fi 무선 디버깅 방법</title>
      <link>https://haservi.github.io/posts/tips/android-wireless-debug/</link>
      <pubDate>Tue, 23 Jul 2024 00:33:33 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/android-wireless-debug/</guid>
      <description>Android 무선 디버깅 하는 방법입니다.</description>
    </item>
    <item>
      <title>Git 상위 폴더에서 한번에 pull하기</title>
      <link>https://haservi.github.io/posts/tips/git-recursive-pull/</link>
      <pubDate>Tue, 16 Jul 2024 19:53:00 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/git-recursive-pull/</guid>
      <description>상위 폴더에서 여러 Git 저장소를 한번에 pull 하는 방법입니다.(window, mac)</description>
    </item>
    <item>
      <title>[도서] 취업과 이직을 위한 프로그래머스 코딩 테스트 문제 풀이 전략 리뷰</title>
      <link>https://haservi.github.io/posts/books/programmers-java/</link>
      <pubDate>Sun, 30 Jun 2024 18:10:54 +0900</pubDate>
      <guid>https://haservi.github.io/posts/books/programmers-java/</guid>
      <description>취업과 이직을 위한 프로그래머스 코딩 테스트 문제 풀이 전략 자바 편 도서 리뷰입니다.</description>
    </item>
    <item>
      <title>Ollama LLM Model 사용하기</title>
      <link>https://haservi.github.io/posts/review/ollama-custom/</link>
      <pubDate>Mon, 10 Jun 2024 22:41:29 +0900</pubDate>
      <guid>https://haservi.github.io/posts/review/ollama-custom/</guid>
      <description>Ollama를 이용해 다양한 LLM Model 구동하기</description>
    </item>
    <item>
      <title>Raycast를 이용하여 업무 효율성 높이기</title>
      <link>https://haservi.github.io/posts/tools/how-to-raycast/</link>
      <pubDate>Sun, 05 May 2024 19:08:24 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tools/how-to-raycast/</guid>
      <description>Raycast의 특정 기능 및 유용한 팁을 공유합니다.</description>
    </item>
    <item>
      <title>Rectangle 이용하여 화면 크기 조절하기</title>
      <link>https://haservi.github.io/posts/tools/how-to-rectangle/</link>
      <pubDate>Thu, 25 Apr 2024 20:52:14 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tools/how-to-rectangle/</guid>
      <description>윈도우를 쓰면 PowerToys를 이용하면 더 세밀하게 화면 크기를 조절할 수 있습니다.
mac에서는 PowerToys가 없는 것 같지만 magnet 또는 rectangle를 이용하면 화면 크기 조절을 할 수 있습니다.
magnet도 좋은 앱이지만 유료이기 때문에 무료인 rectangle을 추천합니다.
개인적으로 이것만 이용해도 화면 조절에 큰 무리 없이 이용할 수 있다 생각됩니다.
설치 및 설정 Rectangle 해당 링크에서 우선 다운로드 후 설치합니다.
사실 Rectangle은 별로 설정할게 없습니다.
설치 후 단축키 설정만 하면 됩니다.
제가 설정한 단축키 설정은 아래와 같습니다.</description>
    </item>
    <item>
      <title>[도서] 육각형 개발자 리뷰</title>
      <link>https://haservi.github.io/posts/books/hexagonal-developer/</link>
      <pubDate>Thu, 18 Apr 2024 19:00:02 +0900</pubDate>
      <guid>https://haservi.github.io/posts/books/hexagonal-developer/</guid>
      <description>최범균 저자님의 책을 처음 접한 것은 예전 스프링5 프로그래밍 입문하기 책이었습니다. 그때의 기억을 생각하면 어렵지 않게 중요한 개념을 쉽게 풀어쓴 책이라 생각됩니다.
육각형 개발자는 종종 개발 블로그 분들이 포스팅을 해주신 것을 봐서 책의 존재는 알고 있었지만 읽을 기회가 없었는데 마침 회사에 비치돼 있어 읽어봤습니다.
공감된 내용 및 정리 책을 읽고 공감된 내용의 일부를 발췌해 봤어요. 몇몇 글은
HTTP 프로토콜, 네트워크 프로그래밍 기초, 동시성 처리, 프로그래밍 언어 등 유행에 상관없는 기술은 공부하는 것이 좋다.</description>
    </item>
    <item>
      <title>2023년 회고</title>
      <link>https://haservi.github.io/posts/review/retrospective-2023/</link>
      <pubDate>Sun, 31 Mar 2024 15:45:26 +0900</pubDate>
      <guid>https://haservi.github.io/posts/review/retrospective-2023/</guid>
      <description>매년 초가 되면 항상 회고를 작성해야겠다 생각하지만, 시간이 지나가면서 점점 다음으로 미루게 되는 경향이 있네요.
1분기는 끝나가지만 남은 3분기를 그래도 이전에 무엇을 했고, 올해는 어떻게 할지 적어보려 합니다.
💼 사내 업무 작년에는 사내 프로젝트로 Node.js로 Backend 서버 구현과 C/C++이 로봇 프로그램 기능 추가 및 유지 보수를 진행했었습니다.
Node.js를 이용한 backend는 처음 구현해 봤지만, 생각보다다 구현이 쉬웠고, 성능도 괜찮은 것 같다고 생각합니다.
중간에 코드가 적응된 뒤에 JavaScript의 코드를 TypeScript로 바꾼 점도 이후 유지보수에 더 좋았던 것 같아요.</description>
    </item>
    <item>
      <title>Synology NAS Docker MariaDB 설치하기</title>
      <link>https://haservi.github.io/posts/devops/docker/nas-mariadb-setting/</link>
      <pubDate>Mon, 01 Jan 2024 22:22:18 +0900</pubDate>
      <guid>https://haservi.github.io/posts/devops/docker/nas-mariadb-setting/</guid>
      <description>개인용 NAS를 충분히 이용하지 못한다는 생각이 문득 들었습니다.
기본적으로 제공하는 Photos, 파일 저장소 정도만 이용하며, Docker Gitlab 서버 배포 중이긴 하지만.. 그냥 배포중 입니다.
이 정도도 충분하긴 하지만 조금 더 활용하면 좋지 않을까라는 생각을 하게 됐습니다.
문득 생각해 보니 NAS에서 Docker를 사용할 수 있다는 것은 개인적으로 운용할 수 있는 장난감 서버로 최적이지 않을까라는 생각이 들었습니다.
물론 아마도 많은 트래픽은 감당하지 못하더라도 개인적인 용도로 테스트 서버 정도는 만들 수 있지 않을까 생각됩니다.</description>
    </item>
    <item>
      <title>와이어 샤크를 이용해 DTLS1.2 handshake 확인하기</title>
      <link>https://haservi.github.io/posts/tips/wireshark-dtls-handshake/</link>
      <pubDate>Sat, 11 Nov 2023 19:26:03 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/wireshark-dtls-handshake/</guid>
      <description>LwM2M과 Anjay의 통신이 간헐적으로 끊기는 현상이 발생하여 이와 관련하여 프로토콜의 개념에 대해 알아보고, 와이어샤크를 이용해 DTLS handshake를 확인한 내용입니다.
LwM2M에 대해 LwM2M (Lightweight M2M)은 경량화된 기기 간 통신 프로토콜로서, IoT (Internet of Things) 기기와 서버 간의 효율적인 통신을 위해 설계되었습니다.
LwM2M은 경량화된 프로토콜로, 리소스 제약이 있는 IoT 기기에서도 효율적으로 동작합니다. 작은 패킷 크기와 최소한의 대역폭을 사용하여 효율적인 통신을 제공합니다.
LwM2M은 RESTful 아키텍처를 기반으로 하며, HTTP/CoAP 프로토콜을 사용하여 기기와 서버 간 통신을 지원합니다.</description>
    </item>
    <item>
      <title>Spring 프로젝트 구조 및 공통 코드 처리 방법</title>
      <link>https://haservi.github.io/posts/spring/spring-project-structure-proecess/</link>
      <pubDate>Sat, 14 Oct 2023 20:45:31 +0900</pubDate>
      <guid>https://haservi.github.io/posts/spring/spring-project-structure-proecess/</guid>
      <description>스프링 프로젝트 중 공통적인 처리에 대한 방법 및 코드 개선에 대한 내용에 대한 정리입니다.
알림
해당 글은 Spring으로 사내 프로젝트를 하면서 느낀 코드 개선 및 경험에 대한 내용입니다.
여러 개발 블로그의 경험과 노하우가 담긴 글을 참조하며, 추가한 내용입니다.
글의 내용이 정답이 아닐 수 있으며, 개인적인 생각으로 가볍게 읽어주세요. :D..
프로젝트 코드 공통 처리 및 여러 Tips 참조링크 : Spring Guide - Directory
최근 프로젝트의 구조는 아래와 같습니다.
위와 같이 패키지를 domain과 global로 나누어 환경을 구축했습니다.</description>
    </item>
    <item>
      <title>P6Spy를 이용하여 로그 출력하기</title>
      <link>https://haservi.github.io/posts/spring/p6-spy-query-log/</link>
      <pubDate>Thu, 31 Aug 2023 22:50:46 +0900</pubDate>
      <guid>https://haservi.github.io/posts/spring/p6-spy-query-log/</guid>
      <description>프로젝트를 하다보면 성능 개선을 위해 어느 쿼리가 얼마나 걸리고, 어떻게 쿼리를 호출하는지 확인해야 할 경우가 있습니다.
JPA QueryDSL을 이용할 때 여러 조인과 entity의 관계를 정의하다 보면 생각하지 못한 부분에서 속도가 매우 느린 경우도 있고, 대용량으로 데이터가 들어오면 잘 되던 쿼리가 느려질 때도 있습니다.
이럴때 p6spy를 이용하여 쿼리를 보기 좋고, 얼마나 걸리는지 확인할 수 있는 방법에 대해 정리했습니다.
위의 저장소에서 쿼리를 로그에 출력할 수 있는 간단한 h2 CRUD 예제 코드를 작성했습니다.</description>
    </item>
    <item>
      <title>Inflearn 토비의 스프링 부트 강의 후기</title>
      <link>https://haservi.github.io/posts/review/inflearn-toby-spring/</link>
      <pubDate>Tue, 08 Aug 2023 23:38:46 +0900</pubDate>
      <guid>https://haservi.github.io/posts/review/inflearn-toby-spring/</guid>
      <description>토비의 스프링 저자로 유명한 토비님이 인프런에 강의를 만드셔서 수강해봤습니다.
인프런 강의 중 김영한 님의 강의가 실제 실무에 큰 도움이 된 것 같다면, 토비님의 강의는 스프링 부트에 대해 조금 더 깊이 있게 알아보는게 목적이었던 것 같습니다.
기존 강의에서는 Spring Boot 2.7과 jdk 11로 했지만 학습 코드는 Spring Boot 3.1.1과 jdk 17로 적용해서 클론 코딩을 진행하며 버전이 달라지면서 발생한 문제와 팁을 정리했습니다.
강의에서 나온 프로그램 추천 sdkman: jdk 및 여러 sdk들의 버전을 쉽게 변경할 수 있도록 해준다.</description>
    </item>
    <item>
      <title>Vue Prettier로 코드 정렬하기</title>
      <link>https://haservi.github.io/posts/tips/vue-code-convetion/</link>
      <pubDate>Tue, 18 Jul 2023 08:59:36 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/vue-code-convetion/</guid>
      <description>이전에 진행 중인 프로젝트에서는 Code Convention이 지켜지지 않아 코드 정렬이 좋지 않은 경우가 있었습니다.
이는 여러 담당자를 거치면서 코드의 가독성이 떨어지고 코드 수정 이후 git history를 확인하기 어렵게 만들었습니다.
이 문제를 해결하기 위해서는 모든 코드를 동일한 Format으로 변경하는 설정을 해야 합니다. 일반적으로 Prettier와 EsLint는 함께 사용됩니다.
ESLint는 코드의 퀄리티를 보장하도록 도와주는 도구입니다. 일관성 있는 방식으로 코드를 구현할 수 있게 됩니다. 예를 들어 함수를 표현할 때 function을 이용할지 arrow를 이용할지 등을 정할 수 있습니다.</description>
    </item>
    <item>
      <title>[Udemy] Udemy K8s Docker 강의 후기</title>
      <link>https://haservi.github.io/posts/review/udemy-k8s-docker/</link>
      <pubDate>Sun, 09 Jul 2023 10:58:32 +0900</pubDate>
      <guid>https://haservi.github.io/posts/review/udemy-k8s-docker/</guid>
      <description>Udemy 강의중 Docker &amp;amp; Kubernetes 강의를 수강 후 내용 정리 및 리뷰를 작성합니다.
우선 Udemy는 외국 강의가 많고, 한달에 여러번 할인을 하기에 괜찮은 강의가 있으면 미리 결재해 놓는게 좋습니다.
강의 후기 Udemy 강의는 할인 가격이 저렴해서 그런지 외국 강의라 그런지 수강률이 높지 않은데 해당 강의는 제가 Udemy에서 수강했었던 강의 중 만족도는 상위권이라 생각합니다.
주로 Backend 개발자 입장에서 해당 강의로 얻을 수 있는 점은 Docker와 Docker-compose를 이용해 개발 생산성을 높일 수 있다 생각합니다.</description>
    </item>
    <item>
      <title>Nodejs 프로젝트 적응기</title>
      <link>https://haservi.github.io/posts/nodejs/start-nodejs/</link>
      <pubDate>Wed, 28 Jun 2023 20:47:06 +0900</pubDate>
      <guid>https://haservi.github.io/posts/nodejs/start-nodejs/</guid>
      <description>6개월 프로젝트로 Node.js를 처음 하면서 만났던 여러 문제들을 처리한 내용을 공유합니다.
약 4개월 정도는 backend 개발을 했던 것 같고, 이후 다른 시스템과 함께 맞춰서 프로젝트를 마무리 했던 것 같습니다.
backend에서는 기본적인 CRUD 기능과 유효성 처리, jwt 인증, 파일 업로드(이어올리기, siging작업 등), FOTA 캠페인 진행 등이 주요 내용입니다.
프로젝트 기술 선택 Framework: express DB: MySQL 먼저 Node.js에서 유명한 프레임워크로 express와 nest.js가 있습니다.
먼저 Spring Backend에 대한 경험으로 nest.js에 대해 고민했지만, npm trends 비교 및 express가 개발 속도 및 현재까지 사용한 사용자도 많기에 express로 선택했습니다.</description>
    </item>
    <item>
      <title>윈도우 WSL Ubuntu D Drive로 변경</title>
      <link>https://haservi.github.io/posts/tips/window-wsl-drive-change/</link>
      <pubDate>Sun, 21 May 2023 19:32:59 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/window-wsl-drive-change/</guid>
      <description>WSL에서 대용량 파일 처리(한사이클에 50GB..)를 하면서 안그래도 부족한 C드라이브 용량이 바닥이 났습니다.. ㅠㅠ..
C드라이브를 늘릴 수는 없으니 급한대로 D드라이브 1TB로 변경 후 WSL Ubuntu를 D드라이브로 옮기기로 정했습니다.
WLS에 대한 명령어는 wsl -h로 확인할 수 있습니다.
아래의 사진처럼 wsl name을 확인 후 해당 name으로 우선 ubuntu를 정지합니다.
1 2 wsl -l -v wsl -t [Name] # 특정 WSL 정지 제 경우는 Ubuntu-20.04 라는 Name이므로 해당 이름을 기준으로 커맨드를 작성했습니다.
WSL 내보내기</description>
    </item>
    <item>
      <title>리눅스에서 활성화된 process 종료 방법</title>
      <link>https://haservi.github.io/posts/tips/ubuntu-port-kill/</link>
      <pubDate>Thu, 11 May 2023 19:14:09 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/ubuntu-port-kill/</guid>
      <description>netstat을 사용하기 위해서 우선 net-tools를 설치해야합니다.
1 sudo apt install net-tools 설치 후 netstat -tulpn 를 입력하면 현재 열린 네트워크 포트와 해당 포트를 열어놓은 프로세스를 보여주는 도구입니다.
여기서 각 옵션의 의미는 다음과 같습니다.
-t: TCP 프로토콜 사용 포트 -u: UDP 프로토콜 사용 포트 -l: 포트를 열어놓은 프로세스 출력 -p: 프로세스 ID 출력 -n: 포트와 프로세스를 숫자로 출력 따라서 netstat -tulpn 명령어를 실행하면, 현재 열린 TCP/UDP 포트와 해당 포트를 열어놓은 프로세스의 정보를 확인할 수 있습니다.</description>
    </item>
    <item>
      <title>WSL 환경에서 내부 MariaDB 설치하기</title>
      <link>https://haservi.github.io/posts/devops/wsl/mariadb-setting/</link>
      <pubDate>Sat, 15 Apr 2023 16:22:31 +0900</pubDate>
      <guid>https://haservi.github.io/posts/devops/wsl/mariadb-setting/</guid>
      <description>WSL 환경에서 DB 설정 방법에 대해 정리했습니다.
우선 기본적으로 윈도우 환경이며, WSL을 이용해 우분투 18.04 버전을 설치합니다.
mariadb-server 설치 및 실행 패키지를 최신으로 업데이트 합니다.
1 2 sudo apt-get update sudo apt-get upgrade 우선 mariadb-server를 설치합니다.
1 2 3 sudo apt install mariadb-server sudo mysql -u root -p # 실행 DB 저장소 경로 변경 방법 만약 db의 저장소를 변경하고 싶다면 아래와 같이 진행하면 됩니다.
우선 db의 경로를 /home/data/mysql으로 가정하겠습니다.
db 접속 후 현재 db의 경로를 확인합니다.</description>
    </item>
    <item>
      <title>Gerrit 코드 리뷰에 대해</title>
      <link>https://haservi.github.io/posts/tips/git-gerrit/</link>
      <pubDate>Mon, 20 Mar 2023 13:42:30 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/git-gerrit/</guid>
      <description>Gerrit은 오픈 소스 웹 기반 코드 리뷰 도구로, Git 버전 관리 시스템을 사용하는 프로젝트에서 코드 검토 및 협업을 용이하게 해줍니다. Gerrit은 구글에서 개발되었으며, 안드로이드 오픈 소스 프로젝트(AOSP) 등 여러 대규모 프로젝트에서 사용되고 있습니다.
Gerrit을 사용하려면 Gerrit 서버를 설치하고 구성해야 합니다.
설치 방법은 공식 문서에서 확인할 수 있습니다.
Gerrit은 웹 기반 코드 커밋 및 버전 관리 도구로, 코드 리뷰를 위한 기능을 제공합니다.
개발자들은 Gerrit을 이용하여 Git 저장소에서 작업한 코드 변경 사항을 리뷰하고, 변경을 승인하거나 거부하고, 수정 요청을 할 수 있습니다.</description>
    </item>
    <item>
      <title>Linux에서 배포 스크립트($&#39;/r&#39;) 발생 시 처리 방법</title>
      <link>https://haservi.github.io/posts/tips/error-script-to-linux/</link>
      <pubDate>Fri, 10 Mar 2023 20:57:33 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/error-script-to-linux/</guid>
      <description>node.js backend 에서 작업 중 테스트 서버에 배포 스크립트를 작성했습니다.
위와 같이 $&#39;\r&#39;: coomand not found가 발생하면 해결 방법은 아래와 같습니다.
1 sed -i &amp;#39;s/\r$//&amp;#39; [스크립트파일.sh] 문제의 원인은 유닉스 기반의 운영체제에서는 줄 바꿈 문자로 줄 바꿈(Line Feed, LF)을 사용하지만, 윈도우 운영체제에서는 줄 바꿈 문자로 CR과 LF를 함께 사용합니다.
그렇기 때문에 유닉스 기반의 운영체제에서는 Windows에서 생성된 텍스트 파일을 처리할 때 이러한 CR 문자가 문제가 될 수 있습니다.
sed 유틸리티를 사용하여 스크립트 파일에서 Windows에서 생성된 줄 바꿈 문자(Carriage Return, CR)를 제거할 수 있습니다.</description>
    </item>
    <item>
      <title>Infra 설정 관련 정리</title>
      <link>https://haservi.github.io/posts/devops/aws/infra-tips/</link>
      <pubDate>Thu, 12 Jan 2023 21:34:04 +0900</pubDate>
      <guid>https://haservi.github.io/posts/devops/aws/infra-tips/</guid>
      <description>인프라 관련 내용 정리가 필요할 것 같아 중요한 키워드 정도로 정리한 내용입니다.
AWS EC2 접속 명령어 기본적으로 pem키를 발급받고 네트워크 보안이 올바르면 아래와 같은 명령어로 pem키를 이용해 접속 가능합니다.
1 2 chmod 400 [pem파일명] ssh -i [pem키 파일명] ubuntu@[퍼블릭 IP 주소] 입력했던 콘솔 보기
1 history bastion host 설정 bastion host란 내부와 외부 네트워크 사이에서 게이트 역할을 수행하는 호스트입니다.
내부 서버나 중요 리소스를 보호하기 위해 생성되며, 일반 유저들에게는 공개하지 않습니다.</description>
    </item>
    <item>
      <title>Windows Nodejs 버전 변경하기</title>
      <link>https://haservi.github.io/posts/tips/window-nodejs-version-change/</link>
      <pubDate>Wed, 26 Oct 2022 22:35:53 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/window-nodejs-version-change/</guid>
      <description>종종 프로젝트 중에는 특정 Node.js 버전에서만 동작하는 프로젝트가 있습니다. 이럴 경우 Docker를 이용하여 컨테이너를 만들거나 로컬인 경우 해당 버전에 맞는 Node.js를 설치해야 합니다.
이번 내용은 전에 작성한 jdk 버전을 변경하듯이 Node.js 버전을 변경하는 방법에 대해 알아볼께요.
알림
해당 글은 Window를 기준으로 작성했습니다.
Mac의 경우는 해당 stackoverflow 질문글을 참조해주세요.
먼저 해당 링크에서 우측의 Release 버튼을 선택합니다. nvm-setup.exe 파일을 다운로드 받습니다. 아래와 같이 파일을 설치하고 버전을 커맨드로 입력해보면 설치된 것을 확인할 수 있습니다.</description>
    </item>
    <item>
      <title>OpenJDK 버전 간편하게 변경하기</title>
      <link>https://haservi.github.io/posts/tips/window-java-version-change/</link>
      <pubDate>Tue, 09 Aug 2022 22:32:07 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/window-java-version-change/</guid>
      <description>Window에서 JDK 버전 간편하게 변경하기 Java를 사용하여 프로젝트를 진행하다 보면 우선적으로 OS 명령을 내리기 위한 JDK(Java Develop Kit) 설치가 필요합니다.
그렇지만 특정 Java 버전을 필요로 하는 프로젝트도 있습니다.
이를 해결하기 위해 도커로 환경을 구성하거나 해당 로컬 컴퓨터의 환경변수를 설정하여 변경하는 것도 가능합니다.
해당 글은 스크립트를 생성하여 터미널 명령어로 간단하게 자바 버전을 변경하는 방법입니다.
모든 설정이 끝나면 아래처럼 터미널에서 명령어만 입력하면 스크립트를 변경 할 수 있습니다.
JDK 설치 및 폴더명 변경 우선 JDK를 다운로드 아무래도 라이선스의 문제가 있을 수 있으니 OpenJDK를 다운받는 것을 추천드립니다.</description>
    </item>
    <item>
      <title>Synology NAS로 Docker GitLab 설치하기</title>
      <link>https://haservi.github.io/posts/devops/docker/nas-docker-gitlab-setting/</link>
      <pubDate>Tue, 02 Aug 2022 23:22:38 +0900</pubDate>
      <guid>https://haservi.github.io/posts/devops/docker/nas-docker-gitlab-setting/</guid>
      <description>시작하며 DSM 7버전에서는 SVN과 GitLab을 패키지로 지원하지 않습니다.
그렇기 때문에 Docker를 이용하여 설치해야 합니다.
제 경우는 KT 공유기와 Synology NAS(220+)에 램 8기가를 추가한 상태입니다.
공유기 포트포워딩만 조금 다를 뿐 전체적인 방법은 동일할 것이라 생각됩니다.
GitLab을 쾌적하게 쓰시려면 최소 램 4기가 이상으로 설정하시는게 좋습니다. 해당 설정은 컨테이너 생성 후에도 편집이 가능하니 필요에 따라 조정하시면 됩니다.
알림
완성 후 GitLab Repository 주소 경로가 올바르지 않은 이슈가 있지만 아래와 같이 설정하면 사용하는데 이상은 없을 것이라 생각됩니다.</description>
    </item>
    <item>
      <title>IntelliJ에서 스프링 프로젝트 관련 설정</title>
      <link>https://haservi.github.io/posts/spring/spring-intellij-start-setting/</link>
      <pubDate>Thu, 07 Jul 2022 00:19:23 +0900</pubDate>
      <guid>https://haservi.github.io/posts/spring/spring-intellij-start-setting/</guid>
      <description>인텔리J에서 스프링 프로젝트를 생성하면 아래 셋팅은 미리 설정하면 좋습니다.
1. 어노테이션 프로세싱 활성화 롬복과 같은 외부 라이브러리를 의존성 주입하게 될 경우 해당 사항을 체크해줘야 컴파일 시 문제 없이 동작합니다.
설정에서 검색창에 annotation을 입력하면 아래와 같은 화면이 나옵니다.
2. Build and run IntelliJ IDEA로 변경 IntelliJ IDEA 인텔리제이 자체에서 제공하는 빌드 자동화 도구입니다.
기본은 Gradle로 설정 돼 있습니다. 이걸 IntelliJ IDEA로 변경하면 더 빠른 테스트를 할 수 있습니다.
Gradle빌드와 IntelliJ IDEA 빌드의 차이는 증분 빌드 여부입니다.</description>
    </item>
    <item>
      <title>Docker 메모리 제한 설정 및 강제 종료</title>
      <link>https://haservi.github.io/posts/devops/docker/docker-smemory-controll-and-exit/</link>
      <pubDate>Sun, 12 Jun 2022 18:22:10 +0900</pubDate>
      <guid>https://haservi.github.io/posts/devops/docker/docker-smemory-controll-and-exit/</guid>
      <description>Docker 메모리 프로세서 제어 Docker를 사용하다 보면 아래처럼 치솟는 메모리 사용량을 볼 때가 있습니다.
아래의 방법은 Docker를 테스트 중 메모리 사용량을 Windows에서 제어 하는 방법입니다.
탐색기의 사용자 위치(C:\Users\&amp;lt;사용자&amp;gt;)에 .wslconfig 파일을 생성합니다.
아래와 같이 해당 파일의 설정을 지정합니다.
1 2 3 4 5 6 7 8 9 10 11 12 # 설정은 WSL 2에서 실행되는 모든 Linux 배포판에 적용 [wsl2] # VM 메모리를 4GB 이하로 제한. # GB 또는 MB를 사용하여 정수로 설정할 수 있음 memory=4GB # 2개의 가상 프로세서를 사용하도록 VM을 설정 processors=2 # 스왑 저장 공간의 양을 8GB로 설정합니다.</description>
    </item>
    <item>
      <title>DBeaver 커스텀 셋팅하기</title>
      <link>https://haservi.github.io/posts/tools/how-to-dbeaver/</link>
      <pubDate>Thu, 02 Jun 2022 20:20:49 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tools/how-to-dbeaver/</guid>
      <description>주로 DB를 관리하는 툴로 HeidiSQL를 많이 사용했습니다.
Spring Data JPA와 QueryDSL 조합을 이용한 뒤로 어느 정도 익숙해지고 나서는 쿼리를 짜는 일이 많이 없지만, 조금 복잡한 쿼리의 경우는 쿼리를 작성해보고 성능 체크 후 QueryDSL로 변환하여 작업합니다.
하지만 Mac환경에서는 HeidiSQL이 Mac을 지원하지 않기 때문에 다른 DB 툴을 사용해야 합니다.
Mac을 지원하는 다양한 DB툴 중에 평가가 꽤 괜찮은 DBeaver링크에 대해 알아보겠습니다.
Dbeaver 란? DBeaver는 Windows와 Mac 모두 지원 거의 모든 Database를 지원(MySQL, PostgreSQL, MariaDB, SQLite, Oracle, DB2, SQL Server&amp;hellip;) 오픈 소스 기반으로 다양한 확장 플러그인 지원 Entity Diagarm 지원 DB 내보내기 불러오기 지원 Community 버전을 이용해도 위와 같은 기능을 모두 사용할 수 있습니다.</description>
    </item>
    <item>
      <title>윈도우 Port 강제 종료 방법</title>
      <link>https://haservi.github.io/posts/tips/window-port-taskkill/</link>
      <pubDate>Mon, 23 May 2022 21:49:41 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/window-port-taskkill/</guid>
      <description>종종 테스트 중 이전에 실행한 Port가 남아서 충돌나는 경우가 있습니다.
기존에 존재하는 Port의 PID를 제거하면 삭제할 수 있습니다.
Port 강제 종료 방법 먼저 windows + R 을 눌러 실행 스크립트를 열어주고 cmd를 입력하여 커맨드 창을 열어줍니다. 명령어로 netstat -a -o를 입력하면 현재 연결된 네트워크 상태를 볼 수 있습니다. 위와 같이 8080포트가 존재하면 우측에 있는 PID의 번호를 기억합니다. 여기서는 49480의 값입니다. taskkill /f /pid 49480을 입력하면 해당 8080포트를 제거할 수 있습니다. </description>
    </item>
    <item>
      <title>비쥬얼 스튜디오 코드에서 자동완성 해제하기</title>
      <link>https://haservi.github.io/posts/tips/visual-studio-code-auto-complete/</link>
      <pubDate>Sun, 03 Apr 2022 14:30:00 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/visual-studio-code-auto-complete/</guid>
      <description>Visual Studio Code의 자동완성 기능 해제 방법 프로그램 실행 후 설정(Ctrl + , 또는 Command + ,)으로 들어간 후 검색항목에 intelliSense를 검색하면 여러 체크박스 리스트를 볼 수 있습니다.
위(Show Classes)에서부터 아래(Show Words)까지 전부 체크 해제를 하면 자동완성 기능이 비활성화 됩니다.
그렇지만 너무 많은 옵션이 있기 때문에 전부 클릭 해제하기가 귀찮은 경우 아래의 JSON으로 추가할 수 있습니다.
오른쪽 위의 설정으로 들어가서 아래의 값들을 복사 후 붙여 넣어주면 됩니다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 &amp;#34;explorer.</description>
    </item>
    <item>
      <title>Git Commit 메시지 규칙</title>
      <link>https://haservi.github.io/posts/tips/git-commit-message-rule/</link>
      <pubDate>Tue, 01 Mar 2022 22:54:30 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/git-commit-message-rule/</guid>
      <description>Git Commit git commit message convetion은 회사 또는 프로젝트 마다 다를 수 있습니다.
message의 형태는 다를 수 있지만 기본적인 목적은 같습니다.
잘 만들어진 git 커밋 메시지는 해당 프로젝트에서 작업하는 팀원과 미래의 자신에게 변경 사항에 대한 의미를 전달하기 위한 좋은 방법입니다.
일반적으로 커밋 메시지는 다음과 같은 구조를 권장합니다.
1 2 3 4 5 type: Subject body footer 보통 위와 같은 형태입니다.
제목은 새로운 기능 추가인 경우 feat: Subject, Feat: Subject, Feat Subject, Feature Subject 등 조금씩 type의 형태가 다르지만 그건 프로젝트에 따라 일관되게 맞추면 됩니다.</description>
    </item>
    <item>
      <title>git CRLF 개행 문자 차이 해결 방법</title>
      <link>https://haservi.github.io/posts/tips/git-crlf/</link>
      <pubDate>Mon, 21 Feb 2022 21:50:28 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/git-crlf/</guid>
      <description>Windows는 line ending으로 CR(Carriage-Return, \r)과 LF(Line Feed \n)을 사용합니다. CRLF는 커서를 다음 라인의 맨앞으로 옮기는 표시이며, ↲ 이러한 표현입니다.
Mac, Linux(Unix 계열)의 경우 LF(Line Feed \n)를 사용합니다. LF는 현재 위치에서 바로 아래로 이동하는 것을 의미하며, ↓ 와 같은 표현입니다.
문제는 같은 작업 영역에서 같은 코드를 수정할 경우 windows와 mac의 코드가 일치하더라도 커서의 표현값이 다르기 때문에 충돌이 일어나는 경우가 발생합니다.
해결 방법으로는 각 운영체제별로 git을 기준으로 LF로 맞춰주는 것입니다.
Windows는 CRLF를 LF로 변경되도록 git config 설정 중 core.</description>
    </item>
    <item>
      <title>Java Priority Queue(우선순위 큐) 원리 및 사용 방법</title>
      <link>https://haservi.github.io/posts/algorithms/priority-queue/</link>
      <pubDate>Mon, 14 Feb 2022 20:20:41 +0900</pubDate>
      <guid>https://haservi.github.io/posts/algorithms/priority-queue/</guid>
      <description>우선순위 큐(Priority Queue) 란? 우선순위 큐(Priority Queue)는 일반적인 큐의 구조와 달리 들어가는 순서와 상관없이 정의한대로 우선순위를 먼저 결정하고 그 우선순위가 높은 데이터가 먼저 나가는 자료구조 입니다. 그렇기 때문에 dequeue를 하면 이미 정의한 순서에 맞게 가장 위의 값이 나타납니다.
우선순위 큐는 힙을 기반으로 하는 완전이진트리로 우선순위를 정하게 됩니다.
사용 방법 우선순위 큐는 우선순위가 꼭 필요한 경우에 사용합니다. 람다식으로 정의해도 되고 Comparable을 이용해서 정의해도 됩니다.
1 2 3 4 5 6 7 8 9 10 11 12 13 // 낮은 숫자가 우선순위가 높은 방식 PriorityQueue&amp;lt;Integer&amp;gt; pq = new PriorityQueue&amp;lt;&amp;gt;(); // 높은 숫자가 우선순위가 높은 방식 PriorityQueue&amp;lt;Integer&amp;gt; pq = new PriorityQueue&amp;lt;&amp;gt;(Collections.</description>
    </item>
    <item>
      <title>H2 2.1.210 Upgrade시 JPA 테스트 에러 해결 방법</title>
      <link>https://haservi.github.io/posts/spring/h2-version-upgrade-error/</link>
      <pubDate>Sat, 29 Jan 2022 19:16:48 +0900</pubDate>
      <guid>https://haservi.github.io/posts/spring/h2-version-upgrade-error/</guid>
      <description>H2를 최신 버전(2.1.210)으로 업데이트하니 아래와 같은 에러가 발생했습니다.
1 2 3 4 5 6 7 8 Caused by: org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be null when &amp;#39;hibernate.dialect&amp;#39; not set ... java.lang.IllegalStateException: Failed to load ApplicationContext at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132) at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124) at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190) ... 일단 임시방편으로 H2 url을 연결하는 곳에 추가적으로 옵션(;MODE=LEGACY)을 넣으면 해결됩니다.
1 url: jdbc:h2:tcp://localhost/~/test;MODE=LEGACY MODE=LEGACY를 모드를 사용하면 H2 1.X용으로 작성된 응용 프로그램에 대한 일부 호환성 기능이 활성화됩니다. Hibernate ORM에서 H2에 대해서 유효하지 않은 SQL을 생성하기 때문이라고 합니다.</description>
    </item>
    <item>
      <title>Spring Data JPA와 JPQL 함께 사용하기</title>
      <link>https://haservi.github.io/posts/spring/springdatajpa-and-customquery/</link>
      <pubDate>Mon, 17 Jan 2022 23:09:03 +0900</pubDate>
      <guid>https://haservi.github.io/posts/spring/springdatajpa-and-customquery/</guid>
      <description>JPQL 이란? 예전에는 JPQL은 Java Persistence Query Language로 불렸지만 현재의 JPQL은(Jakarta Persistence Query Language) 라고 합니다.(나무위키 링크)
2019년부터 JPA(Java Persistence API)또한 Jakarta Persistence로 변경됐습니다.
이름은 달라졌지만 역할은 달라지지 않았습니다. JPQL을 이용하여 관계형 데이터베이스의 엔티티를 정의하고 이를 활용한 쿼리 언어를 자바를 이용하여 구현합니다.
더 나아가 Querydsl을 이용하면 좀 더 직관적이고 오류 없이 자바를 이용하여 작성할 수 있습니다.
간단한 예시로 회원 조회를 하는 경우 JPQL과 Querydsl의 차이는 아래와 같습니다.
JPQL
1 2 3 4 5 6 public List&amp;lt;Member&amp;gt; findAll() { EntityManager entityManager; return entityManager.</description>
    </item>
    <item>
      <title>Mybatis와 JPA에 대하여</title>
      <link>https://haservi.github.io/posts/spring/mybatis-and-jpa/</link>
      <pubDate>Sat, 15 Jan 2022 17:24:58 +0900</pubDate>
      <guid>https://haservi.github.io/posts/spring/mybatis-and-jpa/</guid>
      <description>Mybatis란? 자바의 관계형 데이터베이스 프로그래밍을 좀 더 쉽게 할 수 있게 도와 주는 개발 프레임 워크입니다.
JDBC를 통해 데이터베이스에 엑세스하는 작업을 캡슐화하고 일반 SQL 쿼리, 저장 프로시저 및 고급 매핑을 지원하며 모든 JDBC 코드 및 매개 변수의 중복작업을 제거 합니다.
또한 Java코드와 SQL코드를 분리하여 서로 다른 역할에 집중할 수 있게 합니다.
MyBatis는 DAO(Data Access Object)인터페이스를 통해 SQL과 연결 후 VO(Value Object) 또는 DTO(Data Transfer Object)로 바로 데이터를 가져옵니다.
JPA란? JPA(Java Persistence API)는 ORM(Object-Relational Mapping) 기술 표준으로 JPA가 제공하는 API를 사용하면 직접적으로 SQL을 사용하지 않고도 DB에 접근이 가능합니다.</description>
    </item>
    <item>
      <title>@Autowired와 @RequiredArgsConstructor 차이점 </title>
      <link>https://haservi.github.io/posts/spring/diff-requiredargsconstructor-autowired/</link>
      <pubDate>Wed, 12 Jan 2022 13:39:01 +0900</pubDate>
      <guid>https://haservi.github.io/posts/spring/diff-requiredargsconstructor-autowired/</guid>
      <description>@Autowired는 필드 주입이고, @RequiredArgsConstructor는 생성자 주입(Constructor Injection) 입니다.
@RequiredArgsConstructor는 Lombok에서 제공하는 어노테이션 입니다.
결론적으로 생성자 주입을 권장합니다. 인텔리제이에서 코드를 작성하다보면 @Autowired를 사용하면 아래와 같은 경고를 알려줍니다.
경고
Field injection is not recommended
Inspection info: Spring Team recommends: &amp;ldquo;Always use constructor based dependency injection in your beans. Always use assertions for mandatory dependencies&amp;rdquo;.
뭐.. 추천하지 않고 생성자 주입방식을 쓰라고 하는거 같네요.
생성자 주입으로 코드를 작성하면 아래와 같은 장점이 있습니다.
순환 참조 방지 테스트 코드 작성 용이 코드 악취 제거 객체 변이 방지 필드 주입방식을 쓰면 아래와 같은 단점이 있습니다.</description>
    </item>
    <item>
      <title>Logitech Options를 이용한 마우스 커스텀하기</title>
      <link>https://haservi.github.io/posts/tools/how-to-logitech-option/</link>
      <pubDate>Sat, 08 Jan 2022 19:40:22 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tools/how-to-logitech-option/</guid>
      <description>logitech options 란? 일부 로지텍 마우스 중에는 특정 소프트웨어를 지원하는 기능이 있습니다.
그 중 logitech options는 Flow기능으로 기기간 파일전송이나 하나의 마우스로 여러대의 기기를 제어할 수 있습니다.
이번에 소개해드릴 기능은 Flow기능이 아닌 마우스 제스처 모드에 따른 설정입니다.
설치 해당 사이트에서 OS에 맞는 프로그램을 설치하면 됩니다.
설치 후 정상적으로 마우스가 연결되면 아래와 비슷한 사진이 보입니다.
커스텀 설정하기 프로그램 실행 후 흰색 동그라미가 있는 모든 버튼이 커스텀 가능합니다.
저의 경우 뒤로가기와 앞으로가기 버튼만 커스텀하여 사용하고 있습니다.</description>
    </item>
    <item>
      <title>자주 사용하는 Git Command 정리</title>
      <link>https://haservi.github.io/posts/tips/git-frequently-used-commands/</link>
      <pubDate>Wed, 29 Dec 2021 22:18:20 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/git-frequently-used-commands/</guid>
      <description>Git Command를 사용하면서 자주 사용하는 명령어를 정리했습니다.
이외에도 수많은 명령어가 존재하지만 작업과 관련된 명령어는 아래의 경우로 충분하다고 생각합니다.
해당 명령어 이외에 더 참고하고 싶다면 https://git-scm.com/book/ko/v2 해당 사이트에서 무료로 책을 다운로드 받아서 볼 수 있습니다.
또한, 요즘은 소스트리(https://www.sourcetreeapp.com/)에서 GUI로 편하게 작업할 수 도 있습니다.
기본적인 명령어는 숙지하는 것이 좋지만 history나 간단한 업무용으로는 충분하다고 생각합니다.
기본 명령어 git 설정 보기
1 git config --list 사용자 이름 입력
1 git config --global user.name &amp;#34;이름&amp;#34; 사용자 이메일 입력</description>
    </item>
    <item>
      <title>[Spring] Service와 ServiceImpl에 대해</title>
      <link>https://haservi.github.io/posts/spring/service-and-serviceimp/</link>
      <pubDate>Wed, 22 Dec 2021 20:11:56 +0900</pubDate>
      <guid>https://haservi.github.io/posts/spring/service-and-serviceimp/</guid>
      <description>Service, ServiceImpl Spring 프로젝트를 하면 종종 관례적으로 Service를 interface로 기능 명세를 한 뒤 ServiceImpl에 기능을 구현하게 되는 Factory Pattern을 사용하게 됩니다.
interface는 기능을 추상화하여 클래스간 결합도를 낮추어 주고, 협업 시 업무분담도 용이합니다.
게임으로 예를 들면 스타크래프트에서 모든 유닛의 기본적인 특성 HP, 이동하기를 interface로 기능만 명시하고 각각 분업하여 유닛에 대한 HP나 이동속도를 구현할 수 있습니다.
하지만 일반적인 Spring 웹프로젝트에서는 Service interface는 1:1 구조인 경우가 많습니다. 만약 확장성을 고려한 1:N의 경우에는 interface로 가는 것이 좋지만 너무 막연한 경우에는 그냥 class로 생성 후 추후 시나리오 변경 또는 로직상 확장성이 필요한 경우 interface로 변경하는 것이 좋다고 생각합니다.</description>
    </item>
    <item>
      <title>Github 저장소 안의 폴더 다운로드 받는 방법</title>
      <link>https://haservi.github.io/posts/tips/git-inner-folder-download/</link>
      <pubDate>Sun, 28 Nov 2021 21:30:06 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tips/git-inner-folder-download/</guid>
      <description>기본적으로 웹상에서는 Git 저장소 안의 폴더를 다운받으려면 해당 저장소 전부를 다운 받은 후에 특정 폴더의 정보를 봐야 합니다.
간단한 방법은 아래의 링크에서 다운로드 받는게 제일 쉬운방법이지만 터미널에서 다운로드 방법도 한번 다루어보겠습니다. 터미널로 다운 받은 경우 이후 해당 소스가 변경이 있다면 당겨올 수 있는 이점도 있습니다.
해결방법 웹 다운로드 https://downgit.github.io/#/home 해당 사이트에 github 저장소 특정 폴더의 링크를 복사 한 후 붙여넣고 Download 버튼 클릭
터미널 다운로드 기본적으로 git이 설치돼 있어야합니다.
예제로 https://github.</description>
    </item>
    <item>
      <title>화면 캡쳐 프로그램 추천</title>
      <link>https://haservi.github.io/posts/tools/how-to-capture/</link>
      <pubDate>Thu, 25 Nov 2021 21:38:17 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tools/how-to-capture/</guid>
      <description>작업의 효율을 높이기 위해 기존 화면에서 필요한 정보를 잠시 동안 캡쳐하는 방법이 있습니다.
캡쳐프로그램은 정말 다양하게 존재하는데요. 예를 들어 알캡쳐, picpic, 윈도우 기본 내장 캡쳐, pureRef, snipaste 등 많이 있습니다.
저 같은 경우 포스팅 할 때 화면캡쳐 용도로는 picpick을 자주 이용하며, 업무 중 필요한 정보를 캡쳐 할 때는 snipaste를 사용합니다.
picpick의 경우는 워낙 잘 알려져 있기 때문에 snipaste에 대해 알아보겠습니다.
Snipaste (download link) Snipaste는 특정 화면을 지정하여 캡쳐하여 화면에 띄워놓을 수 있습니다.</description>
    </item>
    <item>
      <title>윈도우 WSL2 Ubuntu 터미널 꾸미기</title>
      <link>https://haservi.github.io/posts/linux/used-zsh-powerline10/</link>
      <pubDate>Mon, 22 Nov 2021 20:49:25 +0900</pubDate>
      <guid>https://haservi.github.io/posts/linux/used-zsh-powerline10/</guid>
      <description>Windows WSL Ubuntu 커스텀 하기 Window에서는 WSL(Windows Subsystem for Linux)를 제공합니다.
예전엔 가상환경(VM)에 리눅스를 올렸다면 지금은 손쉽게 리눅스 커널을 WSL로 접근할 수 있게 됐습니다.
그렇기 때문에 웹개발을 한다면 Window에서 개발하여 WSL에 배포 테스트를 손쉽게? 할 수 있는 환경을 구축 할 수 있습니다. 예를 들어 웹의 경우 Backend, Frontend, DB 같은 환경을 Docker로 설정하여 WSL에 올린 뒤 바로 배포가 성공했다면 이러한 설정을 그대로 AWS나 Azure에 적용할 수 있습니다.
해당 글은 단지 커스텀에 대한 이야기이지만 추후 위와 같은 방법으로 배포테스트도 한 번 다뤄볼 생각입니다.</description>
    </item>
    <item>
      <title>JPA ddl-auto 설정과 더미데이터 생성 방법</title>
      <link>https://haservi.github.io/posts/spring/hibernate-ddl-auto/</link>
      <pubDate>Fri, 12 Nov 2021 15:47:31 +0900</pubDate>
      <guid>https://haservi.github.io/posts/spring/hibernate-ddl-auto/</guid>
      <description>ddl-auto 란 JPA에서는 기본적으로 Entity에 테이블을 매핑하면 쿼리를 사용하지 않고 값을 가져올 수 있습니다.
설정 옵션으로
1 2 3 jpa: hibernate: ddl-auto: create #create-drop, update, validate, none 각각의 옵션을 봐보면 아래와 같습니다.
create : SessionFactory 시작시 스키마를 삭제하고 다시 생성 create-drop : SessionFactory 종료 시 스키마를 삭제 update : SessionFactory 연결된 DB와 비교하여 추가된 항목은 추가 만약 같은 변수명이면 오류발생 validate : SessionFactory 시작시 객체구성과 스키마가 다르다면 예외 발생 none: 아무것도 안함 실제 서비스 배포시에는 create, create-drop, update 와 같은 옵션을 사용하면 안되지만 개발 초기 테스트시에는 유용하게 사용할 수 있습니다.</description>
    </item>
    <item>
      <title>영상을 gif로 만드는 방법</title>
      <link>https://haservi.github.io/posts/tools/how-to-create-gif/</link>
      <pubDate>Sun, 07 Nov 2021 23:57:42 +0900</pubDate>
      <guid>https://haservi.github.io/posts/tools/how-to-create-gif/</guid>
      <description>간단하게 무거운 프로그램을 이용하지 않고 영상을 gif로 만드는 방법입니다.
위 프로그램을 다운로드 받아서 설치하면 됩니다.
설치 방법(Window) https://www.screentogif.com/ 사이트에 접속하셔서 다운로드 합니다.
다운로드 후 설치 합니다.
설치가 완료되면 실행합니다.
위와 같은 화면에서 선택 영역을 지정(예시: 메모장)하고 녹화를 누르면 아래와 같이 나타납니다.
여기서 그냥 녹화를 누른뒤 진행하면 됩니다.
녹화를 마치고 정지를 누르시면 아래와 같은 화면이 나타납니다.
저 같은 경우 초당 30프레임으로 설정하여서 5초짜리 영상에 대략 150프레임의 스크린샷이 찍혔습니다. 많약 더 부드럽게 만드시고 싶다면 프레임을 올리면 됩니다.</description>
    </item>
    <item>
      <title>[프로그래머스]조이스틱</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level2/03-joystick/</link>
      <pubDate>Sun, 24 Oct 2021 22:41:45 +0900</pubDate>
      <guid>https://haservi.github.io/posts/algorithms/programmers/level2/03-joystick/</guid>
      <description>조이스틱 문제 설명 조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.
ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA
조이스틱을 각 방향으로 움직이면 아래와 같습니다.
1 2 3 4 ▲ - 다음 알파벳 ▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로) ◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서) ▶ - 커서를 오른쪽으로 이동 예를 들어 아래의 방법으로 &amp;ldquo;JAZ&amp;quot;를 만들 수 있습니다.</description>
    </item>
    <item>
      <title>[프로그래머스]다리를 지나는 트럭</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level2/02-truck-crossing-the-bridge/</link>
      <pubDate>Mon, 27 Sep 2021 15:17:54 +0900</pubDate>
      <guid>https://haservi.github.io/posts/algorithms/programmers/level2/02-truck-crossing-the-bridge/</guid>
      <description>다리를 지나는 트럭 문제 설명 트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다.
모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다.
다리에는 트럭이 최대 bridge_length대 올라갈 수 있으며, 다리는 weight 이하까지의 무게를 견딜 수 있습니다.
단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.
예를 들어, 트럭 2대가 올라갈 수 있고 무게를 10kg까지 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.</description>
    </item>
    <item>
      <title>[프로그래머스]위장</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level2/01-camouflage/</link>
      <pubDate>Wed, 15 Sep 2021 00:28:00 +0900</pubDate>
      <guid>https://haservi.github.io/posts/algorithms/programmers/level2/01-camouflage/</guid>
      <description>위장 문제 설명 스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.
예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.
종류 이름 얼굴 동그란 안경, 검정 선글라스 상의 파란색 티셔츠 하의 청바지 겉옷 긴 코트 스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.</description>
    </item>
    <item>
      <title>[프로그래머스]하샤드 수</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level1/04-algo-hasshadsu/</link>
      <pubDate>Tue, 07 Sep 2021 11:55:29 +0900</pubDate>
      <guid>https://haservi.github.io/posts/algorithms/programmers/level1/04-algo-hasshadsu/</guid>
      <description>하샤드 수 문제 설명 양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다.
예를 들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로 18은 하샤드 수입니다.
자연수 x를 입력받아 x가 하샤드 수인지 아닌지 검사하는 함수, solution을 완성해주세요.
제한 조건 x는 1 이상, 10000 이하인 정수입니다. 입출력 예 arr return 10 true 12 true 11 false 13 false 입출력 예 설명 입출력 예 #1
10의 모든 자릿수의 합은 1입니다. 10은 1로 나누어 떨어지므로 10은 하샤드 수입니다.</description>
    </item>
    <item>
      <title>[프로그래머스]콜라츠 추측</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level1/03-algo-colatz-guess/</link>
      <pubDate>Mon, 06 Sep 2021 21:01:13 +0900</pubDate>
      <guid>https://haservi.github.io/posts/algorithms/programmers/level1/03-algo-colatz-guess/</guid>
      <description>콜라츠 추측 문제 설명 1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.
1 2 3 1-1. 입력된 수가 짝수라면 2로 나눕니다. 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다. 2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다.
위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요.</description>
    </item>
    <item>
      <title>[프로그래머스]직업군 추천하기</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level1/02-algo-recommend-job/</link>
      <pubDate>Thu, 26 Aug 2021 20:53:37 +0900</pubDate>
      <guid>https://haservi.github.io/posts/algorithms/programmers/level1/02-algo-recommend-job/</guid>
      <description>직업군 추천하기 문제 설명 개발자가 사용하는 언어와 언어 선호도를 입력하면 그에 맞는 직업군을 추천해주는 알고리즘을 개발하려고 합니다.
아래 표는 5개 직업군 별로 많이 사용하는 5개 언어에 직업군 언어 점수를 부여한 표입니다.
점수 SI CONTENTS HARDWARE PORTAL GAME 5 JAVA JAVASCRIPT C JAVA C++ 4 JAVASCRIPT JAVA C++ JAVASCRIPT C# 3 SQL PYTHON PYTHON PYTHON JAVASCRIPT 2 PYTHON SQL JAVA KOTLIN C 1 C# C++ JAVASCRIPT PHP JAVA 예를 들면, SQL의 SI 직업군 언어 점수는 3점이지만 CONTENTS 직업군 언어 점수는 2점입니다.</description>
    </item>
    <item>
      <title>[프로그래머스]비밀지도</title>
      <link>https://haservi.github.io/posts/algorithms/programmers/level1/01-algo-secret-map/</link>
      <pubDate>Fri, 20 Aug 2021 01:31:31 +0900</pubDate>
      <guid>https://haservi.github.io/posts/algorithms/programmers/level1/01-algo-secret-map/</guid>
      <description>비밀지도 문제 설명 네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다.
그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다.
다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.
지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 &amp;ldquo;공백&amp;rdquo;(&amp;quot; &amp;ldquo;) 또는 &amp;ldquo;벽&amp;rdquo;(&amp;rdquo;#&amp;quot;) 두 종류로 이루어져 있다. 전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 &amp;ldquo;지도 1&amp;quot;과 &amp;ldquo;지도 2&amp;quot;라고 하자.
지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다.</description>
    </item>
    <item>
      <title>[도서] 가상 면접 사례로 배우는 대규모 시스템 설계 기초를 읽고</title>
      <link>https://haservi.github.io/posts/books/large-scale-system-design-learned-from-virtual-interviews/</link>
      <pubDate>Sat, 02 Dec 2023 22:28:29 +0900</pubDate>
      <guid>https://haservi.github.io/posts/books/large-scale-system-design-learned-from-virtual-interviews/</guid>
      <description>대규모 시스템 설계를 해본적이 없으니.. 궁금해서 해당 책을 읽어봤습니다.
책의 전반적인 내용은 어렵지 않습니다. 왜냐하면 내용이 깊게 들어가지 않고 말그대로 설계를 하기 때문에 생각보다 읽는데는 쉽다고 느껴졌습니다.
깊게 들어가면 어렵겠지만 책에서는 아주 깊게 들어가지는 않은 것 같아요.
책의 챕터는 12장 정도로 돼어 있으며, 챕터마다 설계해야 하는 서비스가 다릅니다.
책의 내용은 가상 면접을 하는 것처럼 면접관이 프로젝트에 대해 설계를 요청하면, 면접자는 해당 프로젝트의 서비스의 목적과 규모 등에 맞게 질문과 답변을 하는 방식입니다.</description>
    </item>
    <item>
      <title>Projects</title>
      <link>https://haservi.github.io/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://haservi.github.io/projects/</guid>
      <description>projects</description>
    </item>
  </channel>
</rss>
